import fs from 'fs';
import path from 'path';
import Polyglot from 'node-polyglot';
import translations from './translations';
import { FEATURE_TYPES } from './constants';

const phrases = translations.ru;
const polyglot = new Polyglot({ phrases });

const feature = (output) => {
  output.write(`/**
 * Объект
 * @typedef {Object} FEATURE
 * @property {number} type ${polyglot.t('feature.type')}
 * @property {FEATURE_ATTRIBUTES} attrs ${polyglot.t('feature.attrs')}
 * @property {{x: number, y: number}} center ${polyglot.t('feature.center')}
 * @property {{xmax: number, xmin: number, ymax: number, ymin: number}} extent ${polyglot.t(
    'feature.extent',
  )}
 */\n\n`);
};

const featureAttrs = (output) => {
  output.write(`/**
 * Cписок атрибутов
 * @typedef {Object} FEATURE_ATTRIBUTES\n`);

  Object.keys(phrases.attrs[FEATURE_TYPES.LAND_LOT]).forEach((attr) => {
    const description = polyglot.t(`attrs.${FEATURE_TYPES.LAND_LOT}.${attr}`);
    const param = ` * @property {String} ${attr} ${description}\n`;
    output.write(param);
  });

  output.write(' */\n\n');
};

const featureTypes = (output) => {
  output.write(`/**
 * Типы объектов
 * @typedef {Object} FEATURE_TYPES\n`);

  Object.keys(FEATURE_TYPES).forEach((FEATURE_TYPE) => {
    const typeId = FEATURE_TYPES[FEATURE_TYPE];
    const description = polyglot.t(`TYPE_IDS.${typeId}`);
    const param = ` * @property {number} ${FEATURE_TYPE} ${description} (${typeId})\n`;
    output.write(param);
  });

  output.write(' */\n');
};

const outputPath = path.join(__dirname, './definitions.js');
const output = fs.createWriteStream(outputPath);
output.write('/* This file is autogenerated, do not edit */\n\n');

feature(output);
featureTypes(output);
featureAttrs(output);

output.write('\n');
output.close();
